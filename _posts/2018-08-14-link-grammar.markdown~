---
layout: post
title:  "Naive Mid-Sentence Processing"
date:   2018-08-14 17:00:00 -0400
---

The first program I ever tried to create was an original process for making sense of a sentence of natural language as it was being spoken or written. With just a year of computer science classes under my belt and some experience tutoring the same material, this project was ambitious enough that I was probably doomed to fail. However, I would learn a lot in the process, not only about programming and working in a group but also about what kinds of projects I would like to work on going forward.

The idea for the project came from the [OpenCog Foundation](https://opencog.org/), who graciously offered to mentor me under the auspices of Google's Summer of Code 2015. As they pointed out, there had already existed algorithms for producing syntactic parses of complete sentences, such as the [Link Grammar Parser](https://www.abisource.com/projects/link-grammar/). What makes the Link Grammar Parser attractive to OpenCog, as Dr. Ben Goertzel once told me over Slack, is that the words have direct relations of dependency or hierarchy with one another, resulting in simpler parses (fewer nodes). In formal linguistic terminology, it is a syntax parser based on _dependency grammar_, rather than the _phrase structure grammar_ that most K-12 grammar textbooks and linguists such as Noam Chomsky primarily worked with, wherein groupings of words serving a particular purpose in the sentence may also count as nodes in the parse. ![phrase structure grammar]( "woah there")

At its simplest, the Link Grammar Parser consists of:
* a set of relationships two words could have with each other, such as Subject and Verb, Preposition and its Object, and Noun and Modifier
* a dictionary describing the connections that each word in the language could make, also taking into account which word would need to come first or second in the sentence
* a cubic algorithm (**O(n<sup>3</sup>)**) for calculating the possible ways words in a complete sentence may be linked, with optional allowances for imperfect linkages.

To see it work, you can parse a complete sentence [here](http://www.link.cs.cmu.edu/link/submit-sentence-4.html). To understand what the linkages mean, there is also a [dictionary](https://www.abisource.com/projects/link-grammar/dict/index.html)

In the hopes of developing an algorithm to predict syntactic parses mid-sentence on the basis of semantics, I spent my summer reading somewhat deeply into [Word Grammar](http://dickhudson.com/word-grammar/), a linguistic system describing on a theoretical level the relationships of many kinds of linguistic terms with each other (including words, spellings, pronunciations, syntactic links, and semantic concepts).  word nodes. What I didn't realize at the time was that the Link Grammar Parser is fast enough that it may have been first worth implementing a much simpler and more naive form of mid-sentence parsing -- rerunning the parser for each input action. So, as a tribute to my as-of-yet failure to improve upon the mid-sentence processing problem, I've implemented a small ruby script for the command line that repeatedly runs the link grammar parser every time a character is entered or deleted.

